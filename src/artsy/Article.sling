
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is DynamicMapObject abstract imports cape imports capex:

func isValidIdentifier(name as string) static as bool
{
	if(name == null) {
		return(false)
	}
	if(String.getLength(name) < 1) {
		return(false)
	}
	var it = String.iterate(name)
	while(it != null) {
		var c = it.getNextChar()
		if(c < 1) {
			break
		}
		if(c >= 'a' && c <= 'z') {
			;
		}
		else if(c >= 'A' && c <= 'Z') {
			;
		}
		else if(c >= '0' && c <= '9') {
			;
		}
		else if(c == '-' || c == '_' || c == '.') {
			;
		}
		else {
			return(false)
		}
	}
	return(true)
}

var data as DynamicMap
var introHtml as string

ctor
{
	data = new DynamicMap()
}

func getId as string
{
	return(data.getString("id"))
}

func setId(value as string) as this
{
	data.set("id", value)
	return(this)
}

func getTitle as string
{
	return(data.getString("title"))
}

func setTitle(value as string) as this
{
	data.set("title", value)
	return(this)
}

func getAuthor as string
{
	return(data.getString("author"))
}

func setAuthor(value as string) as this
{
	data.set("author", value)
	return(this)
}

func getIntro as string
{
	return(data.getString("intro"))
}

func setIntro(value as string) as this
{
	data.set("intro", value)
	introHtml = null
	return(this)
}

func getTimeStamp as long
{
	return(data.getInteger("timeStamp") as long)
}

func setTimeStamp(value as long) as this
{
	data.set("timeStamp", value)
	return(this)
}

func getIntroHtml(resolver as RichTextDocumentReferenceResolver, callback as function<void,string>)
{
	if(introHtml != null) {
		callback(introHtml)
		return
	}
	var intro = getIntro()
	if(String.isEmpty(intro)) {
		callback("")
		return
	}
	var doc = RichTextDocument.forWikiMarkupString(intro)
	introHtml = doc.toHtml(resolver)
	callback(introHtml)
}

func getContentHtml(resolver as RichTextDocumentReferenceResolver, callback as function<void,string>) abstract
func getAttachment(name as string, callback as function<void,string,buffer>) abstract

func toDynamicMap as DynamicMap
{
	return(data.duplicateMap())
}

func fromDynamicMap(map as DynamicMap)
{
	data.mergeFrom(map)
}
