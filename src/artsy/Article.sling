
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class is DynamicMapObject abstract imports cape imports capex.text:

func isValidIdentifier(name as string) static as bool
{
	if(name == null) {
		return(false)
	}
	if(String.getLength(name) < 1) {
		return(false)
	}
	var it = String.iterate(name)
	while(it != null) {
		var c = it.getNextChar()
		if(c < 1) {
			break
		}
		if(c >= 'a' && c <= 'z') {
			;
		}
		else if(c >= 'A' && c <= 'Z') {
			;
		}
		else if(c >= '0' && c <= '9') {
			;
		}
		else if(c == '-' || c == '_' || c == '.') {
			;
		}
		else {
			return(false)
		}
	}
	return(true)
}

var data as DynamicMap
var introHtml as string

ctor
{
	data = new DynamicMap()
}

func getId as string
{
	return(data.getString("id"))
}

func setId(value as string) as this
{
	data.set("id", value)
	return(this)
}

func getTitle as string
{
	return(data.getString("title"))
}

func setTitle(value as string) as this
{
	data.set("title", value)
	return(this)
}

func getAuthor as string
{
	return(data.getString("author"))
}

func setAuthor(value as string) as this
{
	data.set("author", value)
	return(this)
}

func getIntro as string
{
	return(data.getString("intro"))
}

func setIntro(value as string) as this
{
	data.set("intro", value)
	introHtml = null
	return(this)
}

func getTimeStamp as long
{
	return(data.getInteger("timeStamp") as long)
}

func setTimeStamp(value as long) as this
{
	data.set("timeStamp", value)
	return(this)
}

func getIntroHtml(resolver as RichTextDocumentReferenceResolver, callback as function<void,string>)
{
	if(introHtml != null) {
		callback(introHtml)
		return
	}
	var intro = getIntro()
	if(String.isEmpty(intro)) {
		callback("")
		return
	}
	var doc = RichTextDocument.forWikiMarkupString(intro)
	introHtml = doc.toHtml(resolver)
	callback(introHtml)
}

func getContentMarkup(callback as function<void,string>) abstract
func getContentHtml(resolver as RichTextDocumentReferenceResolver, callback as function<void,string>) abstract
func getAttachment(name as string, callback as function<void,string,buffer>) abstract

func toDynamicMap as DynamicMap
{
	return(data.duplicateMap())
}

func fromDynamicMap(map as DynamicMap)
{
	data.mergeFrom(map)
}
