
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #webapi:

import capex.data
import sympathy.report

prop db as SQLDatabase
prop reportDir as File
prop ctx as LoggingContext

func validateReportName(name as string) as bool
{
	assert name
	assert String.indexOf(name, '/') < 0
	assert String.indexOf(name, '\\') < 0
	return true
}

func getDataSource as ReportDataSource
{
	return SQLDataSource.forDatabase(db)
}

GET "pdf"
{
	var areport = assert req.getParameterAsString("report"):
		req.sendInvalidRequest()
	assert validateReportName(areport):
		req.sendInvalidRequest()
	var file = reportDir.entry(areport .. ".xml")
	var report = assert XMLReportParser.parseFile(ctx, file) {
		Log.error(ctx, "Failed to read report: `" .. file.getPath() .. "'")
		req.sendNotFound()
	}
	// FIXME: Set the formula values from request parameters
	var pr = new ReportProcessor()
	pr.setCtx(ctx)
	pr.setReport(report)
	pr.setDataSource(getDataSource())
	var data = assert pr.processToPdfBuffer() {
		Log.error(ctx, "Failed to generate PDF")
		req.sendInternalError()
	}
	req.sendBuffer(data, "application/pdf")
}
