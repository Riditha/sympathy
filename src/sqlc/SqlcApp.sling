
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ConsoleApplicationMain:

import capex.data
import capex.console
import sympathy.db

func main(args as array<string>) static as int #main:
	return ConsoleApplicationMain.executeMain(new this(), args)

var connectionString as string
var sqlQuery as string
var sqlExecute as string
var verbose = false
var nodata = false
var listTables = false
var count = false
var stream = false
var currentOperation as string
var operationStartTime as TimeValue

func trace(msg as string)
{
	assert verbose
	Log.info(ctx, SystemClock.asString() .. ": " .. msg)
}

func startOperation(name as string)
{
	trace("Start operation: " .. name)
	currentOperation = name
	operationStartTime = SystemClock.asTimeValue()
}

func endOperation
{
	var diff = String.formatLongInteger(TimeValue.diff(SystemClock.asTimeValue(), operationStartTime), ',')
	trace("End operation: " .. currentOperation .. ". Duration=" .. diff)
	operationStartTime = null
	currentOperation = null
}

func execute override as bool
{
	foreach arg in args {
		if arg.isFlag("help") || arg.isFlag("h") {
			ConsoleApplication.PRINT_HEADER(stdout, null)
			return true
		}
		else if arg.isFlag("version") || arg.isFlag("v") {
			ConsoleApplication.PRINT_VERSION(stdout, false)
			return true
		}
		else if arg.isFlag("verbose") {
			verbose = true
			ctx.setEnableDebugMessages(true)
		}
		else if arg.isFlag("nodata") {
			nodata = true
		}
		else if arg.isOption("db") {
			connectionString = arg.getStringValue()
		}
		else if arg.isOption("query") {
			sqlQuery = arg.getStringValue()
		}
		else if arg.isOption("execute") {
			sqlExecute = arg.getStringValue()
		}
		else if arg.isFlag("tables") {
			listTables = true
		}
		else if arg.isFlag("count") {
			count = true
		}
		else if arg.isFlag("stream") {
			stream = true
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	var start = SystemClock.asTimeValue()
	assert String.isNotEmpty(connectionString):
		Log.error(ctx, "No connection string specified. Use -db=.. to specify.")
	trace("Opening database connection")
	var db = assert SQLDatabaseProvider.getDatabase(ctx, connectionString):
		Log.error(ctx, "Invalid connection string: `" .. connectionString .. "'")
	trace("Database connection opened.")
	var v = false
	if listTables {
		startOperation("Retrieve database tables")
		var tabs = db.queryAllTableNames()
		endOperation()
		startOperation("Sorting table array")
		var da = DynamicVector.forObjectVector(tabs)
		da.sort()
		tabs = da.toVector()
		endOperation()
		trace("Total of " .. String.forInteger(Vector.getSize(tabs)) .. " tables found")
		startOperation("Printing table names")
		if not nodata {
			var longestName = 0
			foreach tab as string in tabs {
				var ll = String.getLength(tab)
				if ll > longestName:
					longestName = ll
			}
			foreach tab as string in tabs {
				if count {
					startOperation("Counting records in " .. tab)
					var sv = db.querySingleRow(db.prepare("SELECT COUNT(*) as count FROM \"" .. tab .. "\";"))
					endOperation()
					var count = "unknown"
					if sv:
						count = sv.getString("count")
					if count != "unknown":
						count = String.formatNumberString(count, ',')
					stdout.println(String.padToLength(tab, longestName) .. " : " .. String.padToLength(count, 20, 1))
				}
				else {
					stdout.println(tab)
				}
			}
		}
		endOperation()
	}
	else if sqlQuery {
		startOperation("Preparing SQL query")
		var stmt = db.prepare(sqlQuery)
		endOperation()
		if not stmt {
			Log.error(ctx, "Failed to prepare SQL statement: `" .. sqlQuery .. "'")
		}
		else {
			startOperation("Executing SQL query")
			var sv = db.query(stmt)
			endOperation()
			if not sv {
				Log.error(ctx, "SQL query failed: `" .. sqlQuery .. "'")
			}
			else {
				if stream {
					startOperation("Streaming JSON records")
					if not nodata:
						stdout.print("[")
					var sb = new StringBuilder()
					sv.headerJSON(sb)
					if not nodata:
						stdout.print(sb.toString())
					loop {
						sb.clear()
						if not sv.nextJSON(sb):
							break
						var s = sb.toString()
						if not nodata:
							stdout.print(s)
					}
					if not nodata:
						stdout.print("]")
					endOperation()
				}
				else {
					startOperation("Reading results as JSON")
					var jsondata = sv.toVectorListJSON()
					endOperation()
					trace("JSON String length: " .. String.formatInteger(String.getLength(jsondata), ',') .. " bytes")
					if not nodata {
						startOperation("Printing results on the console")
						stdout.print(jsondata)
						endOperation()
					}
				}
			}
			v = true
		}
	}
	else if sqlExecute {
		Log.info(ctx, "SQL execute: `" .. sqlExecute .. "'")
		v = true
	}
	else {
		Log.error(ctx, "No sql statement to execute. Use either -tables, -query=.. or -execute=.. to specify.")
		v = false
	}
	startOperation("Closing database connection")
	db.close()
	endOperation()
	var tdiff = TimeValue.diff(SystemClock.asTimeValue(), start)
	trace("Operation ended: Total execution time: " .. String.formatLongInteger(tdiff, ',') .. " us")
	return v
}
