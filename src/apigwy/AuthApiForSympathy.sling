
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is AuthApi:

import sympathy
import capex.web

prop authServerUrl as string
var apiClient as JSONAPIClient

func getApiClient as JSONAPIClient
{
	if not apiClient {
		var url = getAuthServerUrl()
		if String.isNotEmpty(url) {
			apiClient = new JSONAPIClient()
			apiClient.setApiUrl(url)
		}
	}
	return apiClient
}

func sessionidToUserid(sessionid as string, callback as function<void,string>)
{
	// FIXME: Here we could and should implement a caching mechanism for the sessionid->userid mapping,
	// even if short term, 15/30 seconds or so...
	var api = assert getApiClient():
		callback(null)
	var params = new DynamicMap()
	params.set("sessionid", sessionid)
	api.postWithStatus("checkSession", params, null, func(v as DynamicMap, error as Error) {
		assert error == null && v:
			callback(null)
		callback(v.getString("userid"))
	})
}

func handleAuthenticatedRequest(req as HTTPServerRequest, handler as function<void,string,string,HTTPServerRequest>)
{
	assert handler && req:
		req.sendJSONError(ServerError.internalError())
	var sessionid = req.getHeader("x-sessionid")
	assert String.isNotEmpty(sessionid):
		req.sendJSONError(ServerError.invalidRequest())
	sessionidToUserid(sessionid, func(userid as string) {
		assert String.isNotEmpty(userid):
			req.sendJSONError(ServerError.invalidSession())
		handler(userid, sessionid, req)
	})
}
