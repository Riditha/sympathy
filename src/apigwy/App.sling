
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebServer:

import sympathy
import sympathy.app
import capex.web

var auth as AuthApi = new AuthApiForDummy()
var endpoints = new map<string,Endpoint>
var maxRequestSize = 1024 * 1024

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "auth.url" {
		if value == "dummy" {
			auth = new AuthApiForDummy()
		}
		else {
			var asy = new AuthApiForSympathy()
			asy.setAuthServerUrl(value)
			auth = asy
		}
		return true
	}
	if key == "maxRequestSize" {
		maxRequestSize = String.toInteger(value)
		return true
	}
	var epswa = "api.endpoint.auth."
	if String.startsWith(key, epswa) {
		var method = String.getSubString(key, String.getLength(epswa))
		var target = value
		if String.isNotEmpty(method) && String.isNotEmpty(target):
			endpoints[method] = new Endpoint(method, target, true)
		return true
	}
	var epsna = "api.endpoint.noauth."
	if String.startsWith(key, epsna) {
		var method = String.getSubString(key, String.getLength(epsna))
		var target = value
		if String.isNotEmpty(method) && String.isNotEmpty(target):
			endpoints[method] = new Endpoint(method, target, false)
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	server.setSmallBodyLimit(maxRequestSize)
	var handler = new ApiHandler()
	handler.setCtx(ctx)
	handler.setAuth(auth)
	handler.setEndpoints(endpoints)
	handler.setWebClient(NativeWebClient.instance())
	server.pushRequestHandler(handler)
	return true
}

main:
	return new this().executeMain(args)
