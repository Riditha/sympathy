
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape #dataModel:

prop id #dataField #primary = -1
prop name as string #dataField #unique
prop title as string #dataField
prop content as string #dataField #text #detail
prop intro as string #dataField #text
prop timeStamp as long #dataField #sortDesc
prop author as string #dataField
prop category as string #dataField #index

ctor
{
	setTimeStamp(SystemClock.asSeconds())
}

func generateName #onImport
{
	this.name = doGenerateName()
}

func doGenerateName private as string
{
	if(title == null) {
		return(null)
	}
	var sb = new StringBuilder()
	var dt = DateTime.forTimeSeconds(timeStamp)
	if(dt != null) {
		var month = dt.getMonth()
		var year = dt.getYear()
		if(month > 0 && year > 1900) {
			sb.append(String.forInteger(year))
			sb.append('-')
			sb.append(String.forIntegerWithPadding(month, 2, "0"))
			sb.append('-')
		}
	}
	var it = String.iterate(title)
	var c as char
	var pc = 0 as char
	while((c = it.getNextChar()) > 0) {
		if(c >= 'A' && c <= 'Z') {
			c = (c - 'A' + 'a') as char
		}
		if((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || c == '-') {
			;
		}
		else {
			c = '-'
		}
		if(c == '-') {
			if(pc != '-') {
				sb.append(c)
			}
		}
		else {
			sb.append(c)
		}
		pc = c
	}
	var r = sb.toString()
	if(String.endsWith(r, "-")) {
		r = String.getSubString(r, 0, String.getLength(r)-1)
	}
	return(r)
}

func validate(callback as function<void,Error>)
{
	if(String.isEmpty(title)) {
		callback(Error.forCode("emptyTitle"))
		return
	}
	if(String.getLength(title) < 3) {
		callback(Error.forCode("titleTooShort"))
		return
	}
	if(String.isEmpty(name)) {
		callback(Error.forCode("emptyName"))
		return
	}
	callback(null)
}
