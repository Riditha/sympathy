
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is JSONAPIClientWithGui imports cape imports cave.ui:

prop apiSecret as string

func customizeRequestHeaders(headers as KeyValueList<string,string>) override
{
	base.customizeRequestHeaders(headers)
	if(apiSecret != null) {
		headers.add("x-secret", apiSecret)
	}
}

func getServerInfo(callback as function<void,string,string>)
{
	doGet("/", func(data as DynamicMap) {
		if(handleAsError(data)) {
			return
		}
		callback(data.getString("server"), data.getString("version"))
	})
}

func getAllArticles(callback as function<void,vector<DynamicMap>>)
{
	doGet("/articles", func(data as DynamicMap) {
		if(handleAsError(data)) {
			return
		}
		var articles = data.getDynamicVector("data")
		if(articles == null) {
			onError(Error.forCode("noArticles"))
			return
		}
		callback(articles.toVectorOfDynamicMaps())
	})
}

func getArticleDetails(articleId as string, callback as function<void,DynamicMap>)
{
	doGet("/articles/" .. articleId, func(data as DynamicMap) {
		if(handleAsError(data)) {
			return
		}
		var dd = data.getDynamicMap("data")
		if(dd == null) {
			onError(Error.forCode("noData"))
			return
		}
		callback(dd)
	})
}

func updateArticle(articleId as string, headers as DynamicMap, content as string, callback as function)
{
	var data = new DynamicMap()
	data.set("headers", headers)
	data.set("content", content)
	doPut("/articles/" .. articleId, data, func(data as DynamicMap) {
		if(handleAsError(data)) {
			return
		}
		callback()
	})
}
