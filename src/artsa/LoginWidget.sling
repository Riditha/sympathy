
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget imports cape imports cave imports cave.ui:

ctor(context as GuiApplicationContext)
{
	base(context)
}

func adjustStyle(context as GuiApplicationContext, widget as TextInputWidget) as TextInputWidget
{
	widget.setWidgetPadding(context.getHeightValue("2mm"))
	widget.setWidgetBackgroundColor(Color.forRGB(0xEF, 0xEF, 0xEF))
	return(widget)
}

func initializeWidget override
{
	base.initializeWidget()
	addWidget(CanvasWidget.forColor(context, Color.white()))
	var container = VerticalBoxWidget.forContext(context)
	container.setWidgetMargin(context.getHeightValue("1mm"))
	container.setWidgetSpacing(context.getHeightValue("3mm"))
	container.setWidgetWidthRequest(context.getWidthValue("100mm"))
	var logo = ImageWidget.forImageResource(context, "sympathy_logo")
	logo.setWidgetImageScaleMethod(ImageWidget.FIT)
	container.addWidget(logo)
	var loginContainer = VerticalBoxWidget.forContext(context)
	loginContainer.setWidgetSpacing(context.getHeightValue("1mm"))
	var serverUrl final = adjustStyle(context, TextInputWidget.forType(context, TextInputWidget.TYPE_URL, "Server URL"))
	var serverSecret final = adjustStyle(context, TextInputWidget.forType(context, TextInputWidget.TYPE_PASSWORD, "Server Secret"))
	loginContainer.addWidget(serverUrl)
	loginContainer.addWidget(serverSecret)
	var loginBtn = TextButtonWidget.forText(context, "Log In", func {
		var url = serverUrl.getWidgetText()
		var secret = serverSecret.getWidgetText()
		if(String.isEmpty(url)) {
			context.showErrorDialog("Server URL must be supplied.")
			return
		}
		var api = new APIClient()
		api.setContext(context)
		api.setParentWidget(this)
		api.setApiUrl(url)
		api.setApiSecret(secret)
		api.getServerInfo(func(serverName as string, serverVersion as string) {
			NavigationWidget.pushToContainer(this, new MainWidget(context).setApi(api))
		})
	})
	loginBtn.setWidgetBackgroundColor(Color.forRGB(128, 128, 255))
	loginBtn.setWidgetTextColor(Color.white())
	loginContainer.addWidget(loginBtn)
	container.addWidget(loginContainer)
	container.addWidget(AlignWidget.forWidget(context, LabelWidget.forText(context, VALUE("copyright")), 0.5, 0.5))
	addWidget(VerticalScrollerWidget.forWidget(context, AlignWidget.forWidget(context, container, 0.5, 0.5)))
}
