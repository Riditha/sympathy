
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class:

import capex.web

func getUserProfile(fbUserId as string, fbAccessToken as string, callback as function<void,DynamicMap,Error>) static:
	getUserProfile(fbUserId, fbAccessToken, null, callback)

func getUserProfile(fbUserId as string, fbAccessToken as string, fields as DynamicVector, callback as function<void,DynamicMap,Error>) static
{
	var f as string
	if fields && fields.getSize() > 0 {
		var sb = new StringBuilder()
		var first = true
		foreach field in fields.toVectorOfStrings() {
			var v = String.strip(field)
			if String.isEmpty(v):
				continue
			if not first:
				sb.append(',')
			first = false
			sb.append(v)
		}
		f = sb.toString()
	}
	if String.isEmpty(f):
		f = "id,address,about,birthday,email,gender,education,first_name,last_name"
	var client = assert NativeWebClient.instance():
		callback(null, Error.forCode("failedToCreateNativeWebClient"))
	client.query("GET", "https://graph.facebook.com/" .. fbUserId .. "?fields=" .. f .. "&access_token=" .. fbAccessToken, null, null, func(statusCode as string, responseHeaders as KeyValueList<string,string>, body as buffer) {
		var json = assert JSONParser.parse(DataValidator.toValidJSONString(replaceUnicodeChars(String.forUTF8Buffer(body)))) as DynamicMap:
			callback(null, Error.forCode("invalidResponse"))
		var error = json.getDynamicMap("error")
		assert not error {
			var e = Error.forMessage(error.getString("message"))
			e.setCode(error.getString("code"))
			e.setDetail(error.getString("fbtrace_id"))
			callback(null, e)
		}
		callback(json, null)
	})
}

func replaceUnicodeChars(response as string) static as string
{
	var str = response
	if(String.contains(response, "\\u0040")) {
		str = String.replace(response, "\\u0040", "@")
	}
	if(String.contains(response, "\\u00f1")) {
		str = String.replace(str, "\\u00f1", "Ã±")
	}
	return(str)
}
