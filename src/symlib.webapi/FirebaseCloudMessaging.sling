
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class:

import capex.web

func send(fcmServerKey as string, registrationIds as DynamicVector, notification as DynamicMap, data as DynamicMap, callback as function<void, DynamicMap, Error>) static
{
	assert String.isNotEmpty(fcmServerKey):
		callback(null, Error.forCode("missingFCMServerKey"))
	var sz = registrationIds.getSize()
	var body = new DynamicMap()
	assert sz > 0:
		callback(null, Error.forCode("missingRegistrationId"))
	if sz == 1 {
		body.set("to", String.asString(registrationIds.get(0)))
	}
	else if sz > 1 {
		body.set("registration_ids", registrationIds)
	}
	body.set("priority", "high")
	body.set("content_available", true)
	if notification:
		body.set("notification", notification)
	if data:
		body.set("data", data)
	var v = new JSONEncoder()
	v.setNiceFormatting(false)
	var json = v.execute(body)
	assert String.isNotEmpty(json):
		callback(null, Error.forCode("jsonEncodingFailed"))
	var client = assert NativeWebClient.instance():
		callback(null, Error.forCode("failedToCreateNativeWebClient"))
	var headers = new KeyValueList<string,string>()
	headers.add("Content-Type", "application/json")
	headers.add("Authorization", "key=" .. fcmServerKey)
	client.query("POST", "https://fcm.googleapis.com/fcm/send", headers, String.toUTF8Buffer(json), func(statusCode as string, responseHeaders as KeyValueList<string,string>, body as buffer) {
		var json = assert JSONParser.parse(body) as DynamicMap:
			callback(null, Error.forCode("invalidResponse"))
		callback(json, null)
	})
}
