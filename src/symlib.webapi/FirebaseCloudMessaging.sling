
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class:

import capex.http

class MyHTTPClientListener is HTTPClientListener
{
	prop listener as function<void, DynamicMap, Error>
	var body as buffer

	func onError(message as string) override
	{
		if listener:
			listener(null, Error.forMessage(message))
	}

	func onAborted override
	{
		if listener:
			listener(null, Error.forCode("aborted"))
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = Buffer.append(body, buffer)
		return true
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if listener {
			var json = assert JSONParser.parse(body) as DynamicMap:
				listener(null, Error.forMessage("Invalid JSON Format from Google: " .. String.asString(body)))
			listener(json, null)
		}
	}
}

func send(fcmServerKey as string, registrationIds as DynamicVector, notification as DynamicMap, data as DynamicMap, listener as function<void,DynamicMap,Error>) static
{
	assert String.isNotEmpty(fcmServerKey):
		listener(null, Error.forCode("missingFCMServerKey"))
	var sz = registrationIds.getSize()
	var body = new DynamicMap()
	assert sz > 0:
		listener(null, Error.forCode("missingRegistrationId"))
	if sz == 1 {
		body.set("to", String.asString(registrationIds.get(0)))
	}
	else if sz > 1 {
		body.set("registration_ids", registrationIds)
	}
	body.set("priority", "high")
	body.set("content_available", true)
	if notification:
		body.set("notification", notification)
	if data:
		body.set("data", data)
	var v = new JSONEncoder()
	v.setNiceFormatting(false)
	var json = v.execute(body)
	assert String.isNotEmpty(json):
		listener(null, Error.forCode("jsonEncodingFailed"))
	var op = new HTTPClientOperation()
	op.setAcceptInvalidCertificate(true)
	var req = HTTPClientRequest.forPOST("https://fcm.googleapis.com/fcm/send", "application/json", String.toUTF8Buffer(json))
	req.addHeader("Authorization", "key=" .. fcmServerKey)
	op.executeRequest(req, new MyHTTPClientListener().setListener(listener))
	op.closeConnection(null)
}
