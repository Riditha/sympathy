
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebServer:

import capex.console
import capex.net
import sympathy
import sympathy.webapi
import sympathy.app

var fcmServerKey as string

main
{
	return new this().executeMain(args)
}

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "fcmServerKey" {
		fcmServerKey = value
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert String.isNotEmpty(fcmServerKey):
		Log.error(ctx, "Please specify FCM server key with the parameter key: 'fcmServerKey'.")
	server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
		if req.isPOST() {
			var body = assert req.getBodyJSONMap():
				req.sendJSONObject(JSONResponse.forInvalidRequest())
			var registrationIds = body.getDynamicVector("registrationIds")
			if not registrationIds || registrationIds.getSize() < 1 {
				var registrationId = body.getString("registrationId")
				assert String.isNotEmpty(registrationId):
					req.sendJSONObject(JSONResponse.forError(Error.instance("noRegistrationId", "No registration id(s) specified.")))
				registrationIds = new DynamicVector()
				registrationIds.append(registrationId)
			}
			var notification = body.getDynamicMap("notification")
			var data = body.getDynamicMap("data")
			assert notification || data:
				req.sendJSONObject(JSONResponse.forInvalidRequest())
			FirebaseCloudMessaging.send(fcmServerKey, registrationIds, notification, data, func(r as DynamicMap, e as Error) {
				assert not e:
					req.sendJSONObject(JSONResponse.forError(e))
				req.sendJSONObject(JSONResponse.forOk())
			})
			return
		}
		next()
	})
	return true
}
