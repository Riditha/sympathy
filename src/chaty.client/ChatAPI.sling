
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape imports capex.net:

prop ctx as LoggingContext
prop onOpenCallback as function<void>
prop onMessageCallback as function<void, ChatMessage>
prop onErrorCallback as function<void>
prop onCloseCallback as function<void>
var socket private as WSSocket
var senderId private as string

func logError(message as string) private
{
	assert ctx
	ctx.logError("ChatEngine: " .. message)
}

func logWarning(message as string) private
{
	assert ctx
	ctx.logWarning("ChatEngine: " .. message)
}

func logInfo(message as string) private
{
	assert ctx
	ctx.logInfo("ChatEngine: " .. message)
}

func logDebug(message as string) private
{
	assert ctx
	ctx.logDebug("ChatEngine: " .. message)
}

func connect(url as string, data as buffer)
{
	var authData final = data
	assert authData {
		logError("No 'authData' specified.")
		assert onErrorCallback {
			logWarning("No 'onErrorCallback' configured. Ignoring error event.")
		}
		onErrorCallback()
	}
	socket = WSSocket.create()
	assert socket {
		logError("Failed to create WSSocket instance!")
	}
	socket.setOnOpenCallback(func {
		socket.send(WSMessage.forData(authData))
		// FIXME: We should send an authentication data by this time
		// before calling the onOpenCallback() method.
	})
	socket.setOnMessageCallback(func(message as WSMessage) {
		onWSMessageReceived(message)
	})
	socket.setOnErrorCallback(func {
		assert onErrorCallback {
			logWarning("No 'onErrorCallback' configured. Ignoring error event.")
		}
		onErrorCallback()
	})
	socket.setOnCloseCallback(func(e as WSCloseEvent) {
		assert onCloseCallback {
			logWarning("No 'onCloseCallback' configured. Ignoring close event.")
		}
		onCloseCallback()
	})
	socket.connect(url, "no sub-protocols")
}

func onWSMessageReceived(message as WSMessage) private
{
	assert message
	assert onMessageCallback {
		logWarning("No 'onMessageCallback' configured. Ignoring message received.")
	}
	var v = JSONParser.parse(message.getData()) as DynamicMap
	assert v {
		logWarning("Invalid message received from server. Closing the connection.")
		close()
	}
	var type = v.getInteger("type")
	switch type {
		case 2: {
			onCommandMessageReceived(v)
			break
		}
		case 1: {
			onDataMessageReceived(v)
			break
		}
		default: {
			close()
		}
	}
}

func onCommandMessageReceived(data as DynamicMap) private
{
	assert data
	var command = data.getInteger("command")
	switch command {
		case 1: {
			assert onOpenCallback {
				logWarning("No 'onOpenCallback' configured. Ignoring open event.")
			}
			senderId = data.getString("userId")
			assert senderId {
				logWarning("No 'userId' included in the open command. Closing the connection.")
				close()
			}
			onOpenCallback()
			break
		}
		default: {
			close()
		}
	}
}

func onDataMessageReceived(data as DynamicMap) private
{
	var v = new ChatMessage()
	v.setChannelId(data.getString("channelId"))
	v.setSenderId(data.getString("senderId"))
	v.setTimestamp(data.getInteger("timestamp"))
	v.setMessage(data.getString("message"))
	v.setRecipients(data.getDynamicVector("recipients"))
	onMessageCallback(v)
}

func close
{
	assert socket {
		logError("No active connection to close!")
	}
	socket.close(1000, "Sample reason for closing")
}

func sendMessage(message as ChatMessage)
{
	assert socket {
		logError("No active connection to send to!")
	}
	assert message
	message.setSenderId(senderId)
	socket.send(WSMessage.forStringData(message.toDynamicMapString()))
}
