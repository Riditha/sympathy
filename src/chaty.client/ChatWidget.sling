
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget abstract imports cape imports cave imports cave.ui:

ctor(context as GuiApplicationContext)
{
	base(context)
	conversationMap = new DynamicMap()
}

prop manager as ChatManager
var active private = false
var conversationList private as VerticalBoxWidget
var conversationMap private as DynamicMap
var navi private as NavigationWidget
var currentConversationWidget private as ChatConversationWidget
var wideScreenContainer as Widget
var wideScreen = false
var narrowScreen = false

func isActive as bool:
	return active

func initializeWidget override
{
	base.initializeWidget()
	var bg = createBackgroundWidgetObject()
	if bg:
		addWidget(bg)
	navi = new NavigationWidget(context)
	navi.setWidgetEnableSidebar(false)
	navi.setWidgetEnableActionBar(false)
	addWidget(navi)
	active = true
}

func computeWidgetLayout(widthConstraint as int #notLiteral) override
{
	if(widthConstraint > context.getWidthValue("200mm")) {
		wideScreenContainer = createChatContainerforWideScreen()
		assert wideScreenContainer
		if navi:
			Widget.removeChildrenOf(navi)
		if not wideScreen {
			wideScreen = true
			narrowScreen = false
			addWidget(wideScreenContainer)
		}
	}
	else {
		if wideScreenContainer && wideScreen == true {
			Widget.removeChildrenOf(this)
			wideScreen = false
		}
		if not narrowScreen {
			narrowScreen = true
			createChatContainerforNarrowScreen()
		}
	}
	base.computeWidgetLayout(widthConstraint)
}

func onNewMessageWidgetClicked protected
{
	if currentConversationWidget {
		Log.warning(context, "ChatWidget: Current ChatConversationWidget object not null!")
		return
	}
	currentConversationWidget = createChatConversationWidgetObject()
	assert currentConversationWidget {
		Log.error(context, "ChatWidget: No ChatConversationWidget instance returned!")
	}
	currentConversationWidget.setChatWidget(this)
	navi.pushWidget(currentConversationWidget)
}

func onMessageReceived(message as ChatMessage)
{
	assert message
	var channelId = assert message.getChannelId()
	var recipients = assert message.getRecipients()
	var ccw = conversationMap.get(channelId) as ChatConversationItemWidget
	if not ccw {
		ccw = createChatConversationItemWidgetObject()
		assert ccw {
			Log.error(context, "ChatWidget: Failed to create ChatConversationWidget object!")
		}
		ccw.setChannelId(channelId)
		ccw.setRecipients(recipients)
		var ccwf final = ccw
		Widget.setWidgetClickHandler(ccw, func {
			onChatConversationWidgetClicked(ccwf)
		})
		conversationList.addWidget(ccw)
		conversationMap.set(channelId, ccw)
	}
	if currentConversationWidget {
		currentConversationWidget.onMessageReceived(message)
		var ccwf final = ccw
		Widget.setWidgetClickHandler(ccw, func {
			onChatConversationWidgetClicked(ccwf)
		})
	}
	ccw.onMessageReceived(message)
}

func onBackFromConversationWidget
{
	assert currentConversationWidget
	currentConversationWidget = null
	navi.popWidget()
}

func sendMessage(message as ChatMessage)
{
	assert (message && manager)
	manager.sendMessage(message)
}

func onChatConversationWidgetClicked(ccw as ChatConversationItemWidget) private
{
	currentConversationWidget = createChatConversationWidgetObject()
	assert currentConversationWidget.initialize(ccw) {
		currentConversationWidget = null
	}
	assert currentConversationWidget
	currentConversationWidget.setChatWidget(this)
	navi.pushWidget(currentConversationWidget)
}

func createBackgroundWidgetObject virtual as Widget:
	return null

func createNewMessageWidgetObject virtual as Widget:
	return null

func createChatContainerforNarrowScreen
{
	navi = new NavigationWidget(context)
	navi.setWidgetEnableSidebar(false)
	navi.setWidgetEnableActionBar(false)
	addWidget(navi)
	var vbox = VerticalBoxWidget.forContext(context)
	var nmw = createNewMessageWidgetObject()
	if nmw {
		vbox.addWidget(VerticalScrollerWidget.forWidget(context, conversationList = VerticalBoxWidget.forContext(context)), 1.0)
		Widget.setWidgetClickHandler(nmw, func {
			onNewMessageWidgetClicked()
		})
		vbox.addWidget(nmw)
	}
	else {
		vbox.addWidget(VerticalScrollerWidget.forWidget(context, conversationList = VerticalBoxWidget.forContext(context)))
	}
	navi.pushWidget(vbox)
}

func createChatContainerforWideScreen abstract as Widget
func createChatConversationItemWidgetObject abstract as ChatConversationItemWidget
func createChatConversationWidgetObject abstract as ChatConversationWidget
