
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class is HTTPServerRequestHandler imports cape imports sympathy:

func forRepository(repository as ArticleRepository) static as this
{
	var v = new this()
	v.setRepository(repository)
	return(v)
}

prop repository as ArticleRepository

func isArticleIdValid(id as string) as bool
{
	return(String.validateCharacters(id, func(c as char) as bool {
		return(c == '-' || Character.isLowercaseAlphaNumeric(c))
	}))
}

func handleRequest(req as HTTPServerRequest, next as function)
{
	if(repository == null) {
		next()
		return
	}
	var rs = req.getCurrentResource()
	var resource = req.popResource()
	if(resource == null) {
		req.sendJSONObject(new DynamicMap()
			.set("server", VALUE "title")
			.set("version", VALUE "version")
		)
		return
	}
	var statusResponseFunction = func(error as Error) {
		if(error != null) {
			req.sendJSONError(error)
			return
		}
		req.sendJSONOK()
	}
	if(resource == "articles") {
		var articleId = req.popResource()
		if(articleId == null) {
			if(req.isGET()) {
				repository.getAllArticles(func(articles as vector<Article>) {
					var v = new DynamicVector()
					foreach(article in articles) {
						v.append(article.toDynamicMap())
					}
					req.sendJSONObject(new DynamicMap()
						.set("status", "ok")
						.set("data", v))
				})
				return
			}
			else if(req.isPOST()) {
				var data = req.getBodyJSONMap()
				if(data == null) {
					req.sendInvalidRequest()
					return
				}
				var id = data.getString("id")
				if(isArticleIdValid(id) == false) {
					req.sendInvalidRequest("Invalid article ID")
					return
				}
				var headers = data.getDynamicMap("headers")
				if(headers == null) {
					headers = new DynamicMap()
				}
				var content = data.getString("content")
				if(content == null) {
					content = ""
				}
				repository.addArticle(id, headers, content, statusResponseFunction)
			}
		}
		else {
			if(isArticleIdValid(articleId) == false) {
				req.sendInvalidRequest("Invalid article ID")
				return
			}
			if(req.isGET()) {
				repository.getArticleById(articleId, func(article as Article) {
					if(article == null) {
						req.setCurrentResource(rs)
						next()
						return
					}
					var data = article.toDynamicMap()
					article.getContentMarkup(func(content as string) {
						data.set("contentMarkup", content)
						req.sendJSONObject(new DynamicMap()
							.set("status", "ok")
							.set("data", data))
					})
				})
				return
			}
			else if(req.isPUT()) {
				var data = req.getBodyJSONMap()
				if(data == null) {
					req.sendInvalidRequest()
					return
				}
				var headers = data.getDynamicMap("headers")
				var content = data.getString("content")
				repository.updateArticle(articleId, headers, content, statusResponseFunction)
			}
			else if(req.isDELETE()) {
				repository.deleteArticle(articleId, statusResponseFunction)
			}
		}
	}
	req.setCurrentResource(rs)
	next()
}
