
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ChatEngine:

import cape
import sympathy.chat

var userMap private as DynamicMap
var channelMap private as DynamicMap


func create(port as int, ctx as LoggingContext) static as this
{
	var v = new this()
	v.setPort(port)
	v.setCtx(ctx)
	return v
}

ctor
{
	userMap = new DynamicMap()
	channelMap = new DynamicMap()
}

func authenticateConnection(data as buffer, callback as function<void, string>) override
{
	var id as string
	loop {
		id = generateId()
		if userMap.get(id) == null:
			break
	}
	callback(id)
}

func getUser(userId as string, callback as function<void, ChatUser>) override
{
	var user = userMap.get(userId) as MyChatUser
	if user {
		callback(user)
		return
	}
	user = new MyChatUser()
	user.setUserId(userId)
	userMap.set(userId, user)
	callback(user)
}

func getUserCount(callback as function<void, int>) override
{
	assert userMap:
		callback(0)
	callback(userMap.getCount())
}

func createChannel(message as ChatMessage, callback as function<void, ChatChannel>) override
{
	assert message:
		callback(null)
	var channelId as string
	loop {
		channelId = generateId()
		if not channelMap || not channelMap.get(channelId):
			break
	}
	var channel = assert MyChatChannel.create(this, message):
		callback(null)
	channel.setChannelId(channelId)
	channelMap.set(channelId, channel)
	callback(channel)
}

func getChannel(channelId as string, callback as function<void, ChatChannel>) override
{
	assert channelMap:
		callback(null)
	callback(channelMap.get(channelId) as MyChatChannel)
}

func createAcknowledgeCommand(userId as string, callback as function<void, ChatMessage>) override
{
	var v = new DynamicMap()
	v.set("userId", userId)
	v.set("type", ChatMessage.COMMAND_TYPE)
	v.set("command", 1)
	callback(MyChatMessage.forDataBuffer(String.toUTF8Buffer(JSONEncoder.encode(v))))
}

func createMessage(data as buffer, callback as function<void, ChatMessage>) override:
	callback(MyChatMessage.forDataBuffer(data))

func checkRecipients(recipients as DynamicVector, callback as function<void, bool>) override
{
	assert recipients:
		callback(false)
	assert recipients.getSize() > 1:
		callback(false)
	callback(true)
}

func onUserOnline(user as ChatUser) override
{
	// This is where we handle users that become online like notifying everyone
}

func onUserOffline(user as ChatUser) override
{
	// This is where we handle users that become offline like notifying everyone
}

func onNewCommandMessage(message as ChatMessage, connection as ChatConnectionHandler) override
{
	// This is where we handle our custom command messages such as showing to other
	// users that someone is typing, uploading, etc.
}

func notifyUserForNewDataMessage(user as ChatUser, message as ChatMessage) override
{
	// This is where we send push notification to offline recipients to let them
	// know that they have a new message.
}
