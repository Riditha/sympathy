
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #webapi:

var engine protected as ChatEngine

func setEngine(engine as ChatEngine):
	this.engine = engine

GET "getUserIdsAssociatedWithUserId/*"
{
	var userId = req.popResource()
	assert String.isNotEmpty(userId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.getUserIdsAssociatedWithUserId(userId, func(list as DynamicVector, error2 as Error) {
		assert not error2:
			req.sendJSONObject(JSONResponse.forError(error2))
		req.sendJSONObject(JSONResponse.forOk(list))
	})
}

POST "createChannelForExternalId"
{
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var recipients = data.getDynamicVector("recipients")
	assert recipients && recipients.getSize() > 1:
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var creatorUserId = data.getString("userId")
	var title = data.getString("title")
	assert String.isNotEmpty(creatorUserId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var externalId = data.getString("externalId")
	assert String.isNotEmpty(externalId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.createChannelForExternalIdAndGetChannelId(externalId, creatorUserId, title, recipients, func(channelId as string, error as Error) {
		assert not error:
			req.sendJSONObject(JSONResponse.forError(error))
		assert String.isNotEmpty(channelId):
			req.sendJSONObject(JSONResponse.forInternalError())
		var v = new DynamicMap()
		v.set("channelId", channelId)
		req.sendJSONObject(JSONResponse.forOk(v))
	})
}

PUT "updateRecipientsForChannelId/*"
{
	var channelId = req.popResource()
	assert String.isNotEmpty(channelId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.updateRecipientsForChannelId(channelId, data.getDynamicVector("recipients"), func(error2 as Error) {
		assert not error2:
			req.sendJSONObject(JSONResponse.forError(error2))
		req.sendJSONObject(JSONResponse.forOk())
	})
}

PUT "updateRecipientsForExternalId/*"
{
	var externalId = req.popResource()
	assert String.isNotEmpty(externalId):
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	var data = assert req.getBodyJSONMap():
		req.sendJSONObject(JSONResponse.forInvalidRequest())
	engine.updateRecipientsForExternalId(externalId, data.getDynamicVector("recipients"), func(error2 as Error) {
		assert not error2:
			req.sendJSONObject(JSONResponse.forError(error2))
		req.sendJSONObject(JSONResponse.forOk())
	})
}
