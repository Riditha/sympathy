
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebServerWithDatabase:

import capex.console
import capex.net
import sympathy
import sympathy.dbapp

var httpControlPort private = -1
var httpControlSecret private as string
var wsPort private = 9090
var authConfig private as DynamicMap
var authTimeoutDelay private as long = 5
var authenticator private as Authenticator
var engine private as ChatEngine

main
{
	return new this().executeMain(args)
}

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "wsPort" {
		wsPort = String.toInteger(value)
		return true
	}
	if key == "httpControlSecret" {
		httpControlSecret = value
		return true
	}
	if key == "httpControlPort" {
		httpControlPort = String.toInteger(value)
		setListenPort(httpControlPort)
		return true
	}
	if "authConfig" == key {
		authConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if key == "authTimeoutDelay" {
		authTimeoutDelay = LongInteger.asLong(value)
		if authTimeoutDelay < 0:
			authTimeoutDelay = 0
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initialize override as bool
{
	assert base.initialize()
	assert authConfig:
		Log.error(ctx, "Please configure authentication service with the parameter key: 'authConfig'.")
	authenticator = AuthenticatorOverHTTP.forConfiguration(authConfig)
	assert authenticator:
		Log.error(ctx, "Failed to initialize authenticator. Please check your authentication service configuration.")
	return true
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server):
		Log.error(ctx, "Failed to initialize HTTP server")
	assert getListenPort() != wsPort:
		Log.error(ctx, "WebSocket port should not be the same with HTTP port.")
	assert wsPort > 1023 && wsPort < 65536:
		Log.error(ctx, "WebSocket port should be between 1024 and 65535.")
	engine = ChatEngine.create(wsPort, getDb(), authenticator, ctx)
	assert engine:
		Log.error(ctx, "Failed to create chat engine instance.")
	engine.setAuthTimeoutDelay(authTimeoutDelay)
	if httpControlPort > 0 {
		if String.isNotEmpty(httpControlSecret) {
			server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
				assert String.equals(httpControlSecret, req.getHeader("x-http-control-secret")):
					req.sendJSONObject(JSONResponse.forNotAuthenticated())
				next()
			})
		}
		var rootHandler = new HTTPControlAPIHandler()
		rootHandler.setEngine(engine)
		server.pushRequestHandler(rootHandler)
	}
	return true
}

func initializeWithIOManager(ioManager as IOManager, ctx as LoggingContext) override as bool
{
	assert engine.initializeEngine(ioManager)
	return true
}
