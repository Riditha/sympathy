
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cape
import capex.crypto
import capex.data

const CHAT_CHANNELS = "chat_channels"
const CHAT_RECIPIENTS = "chat_recipients"
const CHAT_MESSAGES = "chat_messages"
var random private static as Random
var ctx private static as LoggingContext
var db private static as SQLDatabase

func initialize(database as SQLDatabase, context as LoggingContext) static as bool
{
	assert database:
		Log.error(context, "SQL database object is null.")
	random = new Random()
	ctx = context
	db = database
	db.ensureTableExists(Channel.SQL.getTableInfo(CHAT_CHANNELS))
	db.ensureTableExists(Recipient.SQL.getTableInfo(CHAT_RECIPIENTS))
	db.ensureTableExists(Message.SQL.getTableInfo(CHAT_MESSAGES))
	Log.info(context, "DataManager successfully initialized.")
	return true
}

func getDb static as SQLDatabase:
	return db

func hashText(rawText as string) static as string:
	return MD5Encoder.encode(rawText)

func generateCode(prefix as string = null, length as int = 8, allCaps as bool = true) static as string
{
	var sb = StringBuilder.forString(prefix)
	var l = length
	if l < 8:
		l = 8
	for(var i = 0; i < l; i++) {
		if random.nextInt(0, 2) == 0 {
			sb.append(random.nextInt(48, 58) as! char)
		}
		else {
			if allCaps {
				sb.append(Character.toUppercase(random.nextInt(97, 123) as! char))
			}
			else {
				if random.nextInt(0, 2) == 0 {
					sb.append(Character.toUppercase(random.nextInt(97, 123) as! char))
				}
				else {
					sb.append(random.nextInt(97, 123) as! char)
				}
			}
		}
	}
	return sb.toString()
}

func getChannel(channelId as string, callback as function<void, Channel>) static:
	Channel.SQL.queryByChannelId(db, CHAT_CHANNELS, channelId, callback)

func getChannels(userId as string, callback as function<void, DynamicVector>) static:
	Channel.getChannels(userId, callback)

func getRecipients(channelId as string) static as DynamicVector:
	return Recipient.getRecipients(channelId)

func getMessages(channelId as string, callback as function<void, DynamicVector>) static:
	Message.getMessages(channelId, callback)

func getRecentMessage(channelId as string) static as DynamicMap:
	return Message.getRecentMessage(channelId)

func getChannelIdForRecipients(recipients as DynamicVector, creatorUserId as string) static as string:
	return Recipient.getChannelIdForRecipients(recipients, creatorUserId)

func deleteMessages(channelId as string, userId as string, messageIds as DynamicVector, callback as function<void, Error>) static
{
	getChannel(channelId, func(channel as Channel) {
		assert channel:
			callback(Error.instance("invalid_channel_id", "Invalid channel id"))
		assert messageIds && messageIds.getSize() > 0:
			callback(Error.instance("no_message_ids", "No message ids"))
		var messageIdMap = new DynamicMap()
		foreach messageId in messageIds.toVectorOfStrings():
			messageIdMap.set(messageId, messageId)
		assert messageIdMap.getCount() > 0:
			callback(Error.instance("no_message_ids", "No message ids"))
		var ids = messageIdMap.getKeys()
		assert ids && SIZE(ids) > 0:
			callback(Error.instance("internal_error", "Internal error"))
		var sb = new StringBuilder()
		sb.append("SELECT COUNT(*) AS size FROM " .. CHAT_MESSAGES .. " WHERE creatorUserId = ? AND messageId IN (")
		var first = true
		foreach id in ids {
			if not first:
				sb.append(", ")
			first = false
			sb.append("?")
		}
		sb.append(");")
		var stmt = assert db.prepare(sb.toString()):
			callback(Error.instance("internal_error", "Internal error"))
		stmt.addParamString(userId)
		foreach id in ids:
			stmt.addParamString(id)
		var result = assert db.querySingleRow(stmt):
			callback(Error.instance("internal_error", "Internal error"))
		var diff = result.getLongInteger("size") - SIZE(ids)
		assert diff < 1:
			callback(Error.instance("not_allowed", "Cannot delete messages that doesn't belong to you."))
		sb = new StringBuilder()
		sb.append("DELETE FROM " .. CHAT_MESSAGES .. " WHERE creatorUserId = ? AND messageId IN (")
		first = true
		foreach id in ids {
			if not first:
				sb.append(", ")
			first = false
			sb.append("?")
		}
		sb.append(");")
		stmt = db.prepare(sb.toString())
		assert stmt:
			callback(Error.instance("internal_error", "Internal error"))
		stmt.addParamString(userId)
		foreach id in ids:
			stmt.addParamString(id)
		assert db.execute(stmt):
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func deleteChannel(channelId as string, userId as string, callback as function<void, Error>) static
{
	getChannel(channelId, func(channel as Channel) {
		assert channel:
			callback(Error.instance("invalid_channel_id", "Invalid channel id"))
		assert String.isEmpty(channel.getExternalId()):
			callback(Error.instance("not_allowed", "Not allowed"))
		assert String.equals(channel.getChannelCreatorUserId(), userId):
			callback(Error.instance("not_allowed", "Not allowed"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_CHANNELS .. " WHERE channelId = ?;").addParamString(channelId)):
			callback(Error.instance("internal_error", "Internal error"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ?;").addParamString(channelId)):
			callback(Error.instance("internal_error", "Internal error"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?;").addParamString(channelId)):
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func updateRecipients(channelId as string, creatorUserId as string, newRecipients as DynamicVector, callback as function<void, Error>) static
{
	var recipients = getRecipients(channelId)
	assert recipients && recipients.getSize() > 1:
		callback(Error.instance("invalid_channel_id", "Invalid channel id"))
	assert newRecipients && newRecipients.getSize() > 0:
		callback(Error.instance("empty_recipient_list", "Empty recipient list"))
	var userIdMap = new DynamicMap()
	if String.isNotEmpty(creatorUserId):
		userIdMap.set(creatorUserId, creatorUserId)
	foreach userId in newRecipients.toVectorOfStrings() {
		assert String.isNotEmpty(userId):
			callback(Error.instance("empty_user_id_found", "Empty user id found in the list of recipients"))
		userIdMap.set(userId, userId)
	}
	var userIds = userIdMap.getKeys()
	assert userIds && SIZE(userIds) > 1:
		callback(Error.instance("invalid_recipient_count", "Cannot have recipient size less than two"))
	db.execute(db.prepare("DELETE FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ?;").addParamString(channelId), func(deleted as bool) {
		assert deleted:
			callback(Error.instance("internal_error", "Internal error"))
		insertRecipients(channelId, creatorUserId, DynamicVector.forStringVector(userIds), callback)
	})
}

func insertMessage(message as ChatMessage, newChannelId as string, creatorUserId as string, callback as function<void, Message, Error>) static
{
	assert String.isNotEmpty(newChannelId):
		callback(null, Error.instance("no_channel_id", "No channel id"))
	assert message:
		callback(null, Error.instance("no_message", "No message"))
	var messageText = message.getMessage()
	assert String.isNotEmpty(messageText):
		callback(null, Error.instance("no_message", "No message"))
	assert String.isNotEmpty(creatorUserId):
		callback(null, Error.instance("no_creator_user_id", "No creator user id"))
	var v = new Message()
	v.setCreatorUserId(creatorUserId)
	v.setChannelId(newChannelId)
	v.setMessage(messageText)
	Message.SQL.insert(db, CHAT_MESSAGES, v, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(v, null)
	})
}

func getChannelForExternalId(externalId as string, callback as function<void, Channel>) static:
	Channel.getChannelForExternalId(externalId, callback)

func insertChannelForExternalId(externalId as string, channelCreatorUserId as string, title as string, callback as function<void, Channel, Error>) static
{
	assert String.isNotEmpty(externalId):
		callback(null, Error.instance("no_external_id", "No external id"))
	assert String.isNotEmpty(channelCreatorUserId):
		callback(null, Error.instance("no_channel_creator_user_id", "No channel creator user id"))
	var channel = new Channel()
	channel.setExternalId(externalId)
	channel.setChannelCreatorUserId(channelCreatorUserId)
	Channel.SQL.insert(db, CHAT_CHANNELS, channel, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(channel, null)
	})
}

func insertChannel(channelCreatorUserId as string, title as string, callback as function<void, Channel, Error>) static
{
	assert String.isNotEmpty(channelCreatorUserId):
		callback(null, Error.instance("no_channel_creator_user_id", "No channel creator user id"))
	var channel = new Channel()
	channel.setChannelCreatorUserId(channelCreatorUserId)
	channel.setTitle(title)
	Channel.SQL.insert(db, CHAT_CHANNELS, channel, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(channel, null)
	})
}

func updateChannel(channel as Channel, callback as function<void, Channel, Error>) static
{
	assert channel:
		callback(null, Error.instance("no_channel_instance", "No channel instance"))
	assert String.isNotEmpty(channel.getChannelId()):
		callback(null, Error.instance("no_channel_id", "No channel id"))
	assert String.isNotEmpty(channel.getChannelCreatorUserId()):
		callback(null, Error.instance("no_channel_creator_user_id", "No channel creator user id"))
	channel.setTimeStampLastUpdated(SystemClock.asUTCSeconds())
	Channel.SQL.update(db, CHAT_CHANNELS, channel, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(channel, null)
	})
}

func insertRecipients(channelId as string, channelCreatorUserId as string, recipients as DynamicVector, callback as function<void, Error>) static
{
	// FIXME: Make sure to use map to get rid of duplicate user ids.

	assert String.isNotEmpty(channelId):
		callback(Error.instance("no_channel_id", "No channel id"))
	assert recipients && recipients.getSize() > 0:
		callback(Error.instance("no_recipient", "No recipient"))
	var sb = new StringBuilder()
	sb.append("INSERT INTO " .. CHAT_RECIPIENTS .. " (channelId, userId, timeStampCreated, timeStampLastUpdated) VALUES ")
	var userIds = assert recipients.toVectorOfStrings():
		callback(Error.instance("internal_error", "Internal error"))
	if String.isNotEmpty(channelCreatorUserId):
		userIds += channelCreatorUserId
	assert SIZE(userIds) > 1:
		callback(Error.instance("internal_error", "Internal error"))
	var first = true
	foreach userId in userIds {
		if not first:
			sb.append(", ")
		first = false
		sb.append("(?, ?, ?, ?)")
	}
	sb.append(";")
	var stmt = assert db.prepare(sb.toString()):
		callback(Error.instance("internal_error", "Internal error"))
	var now = SystemClock.asUTCSeconds()
	foreach userId in userIds {
		stmt.addParamString(channelId)
		stmt.addParamString(userId)
		stmt.addParamLongInteger(now)
		stmt.addParamLongInteger(now)
	}
	db.execute(stmt, func(success as bool) {
		assert success:
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func getUserIdsAssociatedWithUserId(userId as string, callback as function<void, DynamicVector, Error>) static
{
	db.query(db.prepare("SELECT DISTINCT(userId) FROM " .. CHAT_RECIPIENTS .. " WHERE NOT userId = ? AND channelId IN (SELECT channelId FROM " .. CHAT_RECIPIENTS .. " WHERE userId = ?);"), func(itr as SQLResultSetIterator) {
		assert itr:
			callback(null, Error.instance("internal_error", "Internal error"))
		var list = new DynamicVector()
		loop {
			var v = itr.next()
			if not v:
				break
			list.append(v.getString("userId"))
		}
		callback(list, null)
	})
}
