
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #dataModel:

import cape
import capex.data

prop messageId as string #dataField #primary
prop channelId as string #dataField #index
prop creatorUserId as string #dataField #index
prop message as string #dataField
prop timeStampCreated as long #dataField #index
prop timeStampLastUpdated as long #dataField #index

func onInsert #onInsert
{
	timeStampCreated = SystemClock.asUTCSeconds()
	timeStampLastUpdated = timeStampCreated
	messageId = DataManager.generateCode(DataManager.hashText(channelId .. creatorUserId .. message .. String.forLongInteger(timeStampCreated)), 20)
}

func getMessages(channelId as string, callback as function<void, DynamicVector>) static
{
	var db = assert DataManager.getDb():
		callback(new DynamicVector())
	db.query(db.prepare("SELECT * FROM " .. DataManager.CHAT_MESSAGES .. " WHERE channelId = ? ORDER BY timeStampCreated ASC;").addParamString(channelId), func(itr as SQLResultSetIterator) {
		assert itr:
			callback(new DynamicVector())
		callback(itr.toVectorOfMaps())
	})
}

func getRecentMessage(channelId as string) static as DynamicMap
{
	var db = assert DataManager.getDb()
	return db.querySingleRow(db.prepare("SELECT * FROM " .. DataManager.CHAT_MESSAGES .. " WHERE channelId = ? ORDER BY timeStampCreated DESC LIMIT 1;").addParamString(channelId))
}
