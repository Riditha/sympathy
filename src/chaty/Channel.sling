
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #dataModel:

import cape
import capex.data

prop channelId as string #dataField #primary
prop channelCreatorUserId as string #dataField #index
prop title as string #dataField #index
prop externalId as string #dataField #index
prop timeStampCreated as long #dataField #index
prop timeStampLastUpdated as long #dataField #index
prop channelPhotoFileName as string #dataField #index
prop channelPhoto as buffer #dataField

func onInsert #onInsert
{
	timeStampCreated = SystemClock.asUTCSeconds()
	timeStampLastUpdated = timeStampCreated
	channelId = DataManager.generateCode(DataManager.hashText(channelCreatorUserId .. String.forLongInteger(timeStampCreated)), 20)
}

func getChannelForExternalId(externalId as string, callback as function<void, this>) static
{
	var db = assert DataManager.getDb():
		callback(null)
	assert String.isNotEmpty(externalId):
		callback(null)
	db.querySingleRow(db.prepare("SELECT * FROM " .. DataManager.CHAT_CHANNELS .. " WHERE externalId = ?;").addParamString(externalId), func(v as DynamicMap) {
		callback(forDynamicMap(v))
	})
}

func getChannels(userId as string, page as int, callback as function<void, DynamicVector>) static
{
	var limit = 20
	var offset = page - 1
	if offset < 0:
		offset = 0
	var db = assert DataManager.getDb():
		callback(new DynamicVector())
	assert String.isNotEmpty(userId):
		callback(new DynamicVector())
	db.query(db.prepare("SELECT * FROM " .. DataManager.CHAT_CHANNELS .. " WHERE channelCreatorUserId = ? OR channelId IN (SELECT channelId FROM " .. DataManager.CHAT_RECIPIENTS .. " WHERE userId = ?) ORDER BY timeStampLastUpdated DESC, timeStampCreated DESC LIMIT ? OFFSET ?;").addParamString(userId).addParamString(userId).addParamInteger(limit).addParamInteger(offset * limit), func(itr as SQLResultSetIterator) {
		assert itr:
			callback(new DynamicVector())
		callback(itr.toVectorOfMaps())
	})
}
