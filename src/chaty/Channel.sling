
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class #dataModel:

import cape
import capex.data

prop channelId as string #dataField #primary
prop channelCreatorUserId as string #dataField #index
prop title as string #dataField #index
prop externalId as string #dataField #index
prop timeStampCreated as long #dataField #index
prop timeStampLastUpdated as long #dataField #index
prop channelPhotoFileName as string #dataField #index
prop channelPhoto as buffer #dataField

func onInsert #onInsert
{
	timeStampCreated = SystemClock.asUTCSeconds()
	timeStampLastUpdated = timeStampCreated
	channelId = DataManager.generateCode(DataManager.hashText(channelCreatorUserId .. String.forLongInteger(timeStampCreated)), 20)
}

func getChannelForExternalId(externalId as string, callback as function<void, this>) static
{
	var db = assert DataManager.getDb():
		callback(null)
	assert String.isNotEmpty(externalId):
		callback(null)
	db.querySingleRow(db.prepare("SELECT * FROM " .. DataManager.CHAT_CHANNELS .. " WHERE externalId = ?;").addParamString(externalId), func(v as DynamicMap) {
		assert v:
			callback(null)
		callback(forDynamicMap(v))
	})
}

func getChannels(userId as string, page as int, callback as function<void, DynamicVector>) static
{
	var limit = 20
	var offset = page - 1
	if offset < 0:
		offset = 0
	var db = assert DataManager.getDb():
		callback(new DynamicVector())
	assert String.isNotEmpty(userId):
		callback(new DynamicVector())
	db.query(db.prepare("SELECT * FROM " .. DataManager.CHAT_CHANNELS .. " WHERE channelCreatorUserId = ? OR channelId IN (SELECT channelId FROM " .. DataManager.CHAT_RECIPIENTS .. " WHERE userId = ?) ORDER BY timeStampLastUpdated DESC, timeStampCreated DESC LIMIT ? OFFSET ?;").addParamString(userId).addParamString(userId).addParamInteger(limit).addParamInteger(offset * limit), func(itr as SQLResultSetIterator) {
		assert itr:
			callback(new DynamicVector())
		callback(itr.toVectorOfMaps())
	})
}
