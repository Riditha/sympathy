
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #webapi:

import capex.data
import sympathy.service

prop db as SQLDatabase

func validateProfileDataField(key as string, val as string) private as bool
{
	assert key
	if key == "firstname" {
		if String.getLength(val) > 32:
			return false
		return true
	}
	if key == "lastname" {
		if String.getLength(val) > 32:
			return false
		return true
	}
	if key == "organization" {
		if String.getLength(val) > 32:
			return false
		return true
	}
	return false
}

POST "getMyProfile"
{
	AuthServerApi.handleAuthenticatedRequest(req, func(userid as string, params as DynamicMap) {
		var stmt = assert db.prepareSelectStatement("profile", new DynamicMap().set("userid", userid)):
			req.sendJSONError(ServerError.internalError())
		db.querySingleRow(stmt, func(v as DynamicMap) {
			var vv = v
			if not vv:
				vv = new DynamicMap()
			vv.set("userid", userid)
			req.sendJSONOK(vv)
		})
	})
}

POST "updateMyProfile"
{
	AuthServerApi.handleAuthenticatedRequest(req, func(userid as string, params as DynamicMap) {
		assert params.getCount() > 0:
			req.sendJSONError(ServerError.invalidRequest())
		foreach key in params.getKeys() {
			assert validateProfileDataField(key, params.getString(key)):
				req.sendJSONError(ServerError.invalidRequest())
		}
		var criteria = new DynamicMap().set("userid", userid)
		db.executeUpdateDelete(db.prepareUpdateStatement("profile", criteria, params), func(rows as int) {
			if rows < 1 {
				params.set("userid", userid)
				db.executeUpdateDelete(db.prepareInsertStatement("profile", params), func(rows as int) {
					assert rows > 0:
						req.sendJSONError(ServerError.failedToSave())
					req.sendJSONOK()
				})
			}
			else {
				req.sendJSONOK()
			}
		})
	})
}
