
/*
 * This file is part of Sympathy
 * Copyright (c) 2017-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import capex.data
import capex.crypto

prop authenticateConnectionCallback as function<string, buffer>
prop messageReceivedCallback as function<void, SMSMessage>
prop ctx as LoggingContext
var userMap private as DynamicMap
var connectionSize private as int
var random private as Random

ctor
{
	userMap = new DynamicMap()
	connectionSize = 0
	random = new Random()
}

func generateId private as string:
	return MD5Encoder.encode(String.forInteger(SystemClock.asSeconds()) .. String.forInteger(random.nextInt(9999999)) .. String.forInteger(random.nextInt(9999999)) .. String.forInteger(random.nextInt(9999999)))

func logError(message as string)
{
	assert ctx
	ctx.logError(VALUE "__THIS__" .. ": " .. message)
}

func logWarning(message as string)
{
	assert ctx
	ctx.logWarning(VALUE "__THIS__" .. ": " .. message)
}

func logInfo(message as string)
{
	assert ctx
	ctx.logInfo(VALUE "__THIS__" .. ": " .. message)
}

func logDebug(message as string)
{
	assert ctx
	ctx.logDebug(VALUE "__THIS__" .. ": " .. message)
}

func onDataReceived(data as buffer, connection as SMSConnectionHandler)
{
	assert connection
	assert data:
		connection.close()
	var user = assert connection.getUser() {
		onAuthenticateConnection(data, connection)
	}
	onParseData(data, connection)
}

func onParseData(data as buffer, connection as SMSConnectionHandler) private
{
	assert connection
	assert data:
		connection.close()
	var d = assert JSONParser.parse(data) as DynamicMap {
		connection.close()
	}
	onMessageReceived(d)
}

func onMessageReceived(data as DynamicMap)
{
	assert data
	logDebug("New message received: " .. String.asString(data))
	if messageReceivedCallback:
		messageReceivedCallback(String.toUTF8Buffer(JSONEncoder.encode(data)))
}

func onNewMessage(message as SMSMessage, connection as SMSConnectionHandler)
{
	assert message
	connection.sendMessage(message.toBuffer())
}

func onAuthenticateConnection(data as buffer, connection as SMSConnectionHandler)
{
	var id as string
	if authenticateConnectionCallback == null {
		logWarning("No 'authenticateConnectionCallback' set. No authentication done.")
		id = generateId()
	}
	else {
		id = authenticateConnectionCallback(data)
	}
	var user = getUser(id)
	if user == null {
		user = new SMSUser()
		user.setId(id)
		userMap.set(id, user)
	}
	connection.setUser(user)
	loop {
		var connectionId = generateId()
		if user.getConnection(connectionId) == null {
			connection.setConnectionId(connectionId)
			break
		}
	}
	user.addConnection(connection)
	connectionSize++
	logDebug("New connection. Now: (" .. String.forInteger(connectionSize) .. ") connected")
	var v = new DynamicMap()
	v.set("userId", id)
	v.set("type", 2)
	var message = assert String.toUTF8Buffer(JSONEncoder.encode(v)) {
		logWarning("User details null in SMSEngine")
		connection.close()
	}
	var r = connection.sendMessage(message)
	if r < 1:
		return
}

func getUser(id as string) as SMSUser:
	return userMap.get(id) as SMSUser

func onUserDisconnect(id as string, connection as SMSConnectionHandler)
{
	var user = assert getUser(id)
	user.removeConnection(connection)
	connectionSize--
	logDebug("Connection closed. Now: (" .. String.forInteger(connectionSize) .. "/" .. String.forInteger(userMap.getCount()) .. ") connected")
}

func broadCastMessage(message as SMSMessage)
{
	assert message
	var messageBuffer = message.toBuffer()
	var iter = assert userMap.iterateValues()
	loop {
		var user = iter.next() as SMSUser
		if not user:
			break
		foreach connectionId in user.getConnectionIds() {
			var connection = user.getConnection(connectionId)
			if not connection:
				continue
			if connection.sendMessage(messageBuffer) < 1:
				logError("Failed to send SMS message")
		}
	}
}
