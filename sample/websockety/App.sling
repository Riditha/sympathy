
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape imports capex.console imports capex.net imports sympathy:

func main(args as array<string>) static as int #main
{
	if new this().execute(args) == false:
		return 1
	return 0
}

func execute(args as array<string>) as bool
{
	var port = 8080
	var arguments = ConsoleApplication.parseCommandLineArguments(args)
	foreach arg in arguments {
		if arg.isOption("port") || arg.isOption("listenPort") {
			port = arg.getIntegerValue()
		}
	}
	var ctx as LoggingContext = new ConsoleApplicationContext()
	(ctx as! ConsoleApplicationContext).setEnableDebugMessages(true)
	var server = new WSServer()
	server.setPort(port)

	// This is how we set our WebSocket connection handlers.
	// We will set the WSServer property function CreateConnectionHandlerObject
	// and from there return an instance of our custom connection handler that
	// inherits the abstract class WWServerConnectionHandler.
	// This will separate the WSServerConnection from the application layer.

	server.setCreateConnectionHandlerObject(func as WSServerConnectionHandler {
		return new Handler().setLogContext(ctx)
	})
	var ioManager = assert IOManager.createDefault() {
		Log.error(ctx, "Failed to create IO manager")
	}
	assert server.initialize(ioManager, ctx) {
		Log.error(ctx, "Failed to initialize HTTP server.")
	}
	assert ioManager.execute(ctx) {
		Log.error(ctx, "Failed to execute IO manager")
	}
	Log.info(ctx, "Exiting normally.")
	return true
}

class Handler is WSServerConnectionHandler
{
	// This is how we will handle WebSocket connections and messages

	func onCloseMessage(message as WSServerMessage) override:
		Log.debug(logContext, "Handler: onCloseMessage")

	func onPingMessage(message as WSServerMessage) override as bool
	{
		Log.debug(logContext, "Handler: onPingMessage")
		return false
	}

	func onPongMessage(message as WSServerMessage) override:
		Log.debug(logContext, "Handler: onPongMessage")

	func onDataMessage(message as WSServerMessage) override
	{
		if message.isDataText() {
			var str = String.forUTF8Buffer(message.getPayloadBuffer())
			Log.debug(logContext, "Handler: onDataMessage: '" .. str .. "'")
			if(str == "text"):
				sendResponse(WSServerMessage.create(1, 0, 0, 0, 1, null, String.toUTF8Buffer("sample text")))
			if(str == "binary"):
				sendResponse(WSServerMessage.create(1, 0, 0, 0, 2, null, String.toUTF8Buffer("sample binary")))
			if(str == "close"):
				sendResponse(WSServerMessage.forCloseControlFrame(1013, "Sample reason"))
		}
		if message.isDataBinary():
			Log.debug(logContext, "Handler: onDataMessage with size: " .. String.forInteger(SIZE(message.getPayloadBuffer())))
	}
}
